package datastores;

import java.util.List;

import javax.inject.Singleton;

import org.bson.types.ObjectId;
import org.mongodb.morphia.Datastore;
import org.mongodb.morphia.query.FindOptions;
import org.mongodb.morphia.query.Query;

import com.mongodb.DBObject;
import com.mongodb.util.JSON;
import apimodels.*;
import apimodels.parameters.FindRequest;
import services.MongoDB;

@Singleton
public class {{classname}}Datastore {

	private Datastore datastore = new MongoDB().getMorphiaDatastore();

	public {{classname}} getById(ObjectId id) {
		final Query<{{classname}}> query = datastore.createQuery({{classname}}.class);
		query.criteria("id").equal(id);

		return query.get();
	}

	public List<{{classname}}> find(FindRequest findRequest, ObjectId ownerId) {

		
		
		DBObject query = (DBObject) JSON.parse(findRequest.getQuery());

		Query<{{classname}}> findQuery = datastore.getQueryFactory().createQuery(datastore,
				datastore.getCollection({{classname}}.class), {{classname}}.class, query);
		findQuery.criteria("ownerId").equal(ownerId);
		FindOptions options = new FindOptions();
		options.skip(findRequest.getSkip());
		options.limit(findRequest.getLimit());
		

		return (List<{{classname}}>) findQuery.asList(options);
	}



	public {{classname}} getByIdAndOwner(ObjectId id, ObjectId ownerId) {

		final Query<{{classname}}> query = datastore.createQuery({{classname}}.class);
		query.and(query.criteria("ownerId").equal(ownerId), query.criteria("id").equal(id));

		return query.get();
	}

	public {{classname}} save({{classname}} model) {
		datastore.save(model);
		return model;
	}


	public {{classname}} delete(ObjectId id, ObjectId ownerId) throws Exception {
		{{classname}} model = getByIdAndOwner(id, ownerId);
		return delete(model);
	}

	public {{classname}} delete({{classname}} model) throws Exception {
		datastore.delete(model);
		return model;
	}

}
