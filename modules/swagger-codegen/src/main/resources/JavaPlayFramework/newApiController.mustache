package {{package}};

import apimodels.User;
{{#imports}}import {{import}};
{{/imports}}

import play.mvc.Controller;
import play.mvc.Result;
import play.mvc.Http;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.JsonNode;
import com.google.inject.Inject;
import java.io.IOException;
import swagger.SwaggerUtils;
import com.fasterxml.jackson.core.type.TypeReference;

{{#useBeanValidation}}
import javax.validation.constraints.*;
{{/useBeanValidation}}

{{#wrapCalls}}
import swagger.SwaggerUtils.ApiAction;
{{/wrapCalls}}

{{>generatedAnnotation}}
{{#operations}}
public class {{classname}}Controller extends RESTController {

    {{^controllerOnly}}private final {{classname}}ControllerImp imp;{{/controllerOnly}}

    @Inject
    private {{classname}}Controller({{^controllerOnly}}{{classname}}ControllerImp imp{{/controllerOnly}}) {
        {{^controllerOnly}}this.imp = imp;{{/controllerOnly}}
    }

{{#operation}}


    public Result {{operationId}}({{#pathParams}}{{>pathParams}}{{#hasMore}},{{/hasMore}}{{/pathParams}}) {{^handleExceptions}}{{#bodyParams}}throws IOException{{/bodyParams}}{{/handleExceptions}}{{#handleExceptions}}throws Exception{{/handleExceptions}} {
        {{#queryParams}}
        {{#collectionFormat}}
        List<String> {{paramName}}List = SwaggerUtils.parametersToList("{{collectionFormat}}", request().queryString().get("{{baseName}}"));
        {{{dataType}}} {{paramName}} = new Array{{{dataType}}}();
        for (String curParam : {{paramName}}List) {
            //noinspection UseBulkOperation
            {{paramName}}.add({{>conversionBegin}}curParam{{>conversionEnd}});
        }
        {{/collectionFormat}}
        {{^collectionFormat}}
        String value{{paramName}} = request().getQueryString("{{paramName}}");
        {{{dataType}}} {{paramName}};
        {{^required}}
        if (value{{paramName}} != null) {
            {{paramName}} = {{>conversionBegin}}value{{paramName}}{{>conversionEnd}};{{/required}}
        {{#required}}{{paramName}} = {{>conversionBegin}}value{{paramName}}{{>conversionEnd}};{{/required}}
        {{^required}}
        } else {
            {{paramName}} = {{>paramDefaultValue}};
        }{{/required}}
        {{/collectionFormat}}
        {{/queryParams}}
        {{#formParams}}
        {{^notFile}}
        {{{dataType}}} {{paramName}} = request().body().asMultipartFormData().getFile("{{baseName}}");
        {{#required}}if (({{paramName}} == null || ((File) {{paramName}}.getFile()).length() == 0)) {
            throw new RuntimeException("File cannot be empty");
        }
        {{/required}}
        {{/notFile}}
        {{#notFile}}
        {{#collectionFormat}}
        List<String> {{paramName}}List = SwaggerUtils.parametersToList("{{collectionFormat}}", request().body().asMultipartFormData().asFormUrlEncoded().get("{{baseName}}"));
        {{{dataType}}} {{paramName}} = new Array{{{dataType}}}();
        for (String curParam : {{paramName}}List) {
            //noinspection UseBulkOperation
            {{paramName}}.add({{>conversionBegin}}curParam{{>conversionEnd}});
        }
        {{/collectionFormat}}
        {{^collectionFormat}}
        String value{{paramName}} = (request().body().asMultipartFormData().asFormUrlEncoded().get("{{baseName}}"))[0];
        {{{dataType}}} {{paramName}};
        {{^required}}
        if (value{{paramName}} != null) {
            {{paramName}} = {{>conversionBegin}}value{{paramName}}{{>conversionEnd}};{{/required}}
        {{#required}}{{paramName}} = {{>conversionBegin}}value{{paramName}}{{>conversionEnd}};{{/required}}
        {{^required}}
        } else {
            {{paramName}} = {{>paramDefaultValue}};
        }{{/required}}
        {{/collectionFormat}}
        {{/notFile}}
        {{/formParams}}
        {{#headerParams}}
        {{#collectionFormat}}
        List<String> {{paramName}}List = SwaggerUtils.parametersToList("{{collectionFormat}}", request().headers().get("{{baseName}}"));
        {{{dataType}}} {{paramName}} = new Array{{{dataType}}}();
        for (String curParam : {{paramName}}List) {
            //noinspection UseBulkOperation
            {{paramName}}.add({{>conversionBegin}}curParam{{>conversionEnd}});
        }
        {{/collectionFormat}}
        {{^collectionFormat}}
        String value{{paramName}} = request().getHeader("{{baseName}}");
        {{{dataType}}} {{paramName}};
        {{^required}}
        if (value{{paramName}} != null) {
            {{paramName}} = {{>conversionBegin}}value{{paramName}}{{>conversionEnd}};{{/required}}
        {{#required}}{{paramName}} = {{>conversionBegin}}value{{paramName}}{{>conversionEnd}};{{/required}}
        {{^required}}
        } else {
            {{paramName}} = {{>paramDefaultValue}};
        }{{/required}}
        {{/collectionFormat}}
        {{/headerParams}}
        {{^controllerOnly}}
        User user = (User) ctx().args.get("user");
		JsonNode body_as_json = request().body().asJson();
		//Change me, remove "Api"
		{{classname}} model = Json.fromJson(body_as_json, {{classname}}.class);
        {{#returnType}}{{>returnTypesNoVoid}} result = {{/returnType}}imp.{{operationId}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}, user);{{#returnType}}{{^isResponseFile}}{{^returnTypeIsPrimitive}}{{#useBeanValidation}}
        {{#isListContainer}}for ({{{returnType}}} curItem : obj) {

        }{{/isListContainer}}{{#isMapContainer}}for (Map.Entry<String, {{{returnType}}}> entry : obj.entrySet()) {
            entry.getValue().validate();
        }
        {{/isMapContainer}}{{^returnContainer}}{{/returnContainer}}{{/useBeanValidation}}{{/returnTypeIsPrimitive}}{{/isResponseFile}}{{/returnType}}
        {{#returnType}}{{^isResponseFile}}
        return jsonOk(result);{{/isResponseFile}}{{#isResponseFile}}return jsonOk(result);{{/isResponseFile}}{{/returnType}}
        {{^returnType}}return ok();{{/returnType}}{{/controllerOnly}}
        {{#controllerOnly}}return ok();{{/controllerOnly}}
    }
{{/operation}}
}
{{/operations}}
